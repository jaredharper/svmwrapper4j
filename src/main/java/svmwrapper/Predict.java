package svmwrapper;

import java.util.List;

import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_node;
import libsvm.svm_parameter;

/**
 * This class contains logic to use the svm_model generated by Train
 * to predict the class label for unclassified data.<br><br>
 * 
 * Code is a simplified version of libsvm's svm_predict.java<br><br>
 * 
 * @author jharper
 *
 */
public class Predict
{

	/**
	 * This method fills in the predicted class label for unlabeled data.
	 * 
	 * @param model - the svm_model object created/populated by Train
	 * @param predict_probability - whether or not to predict probability estimates
	 * @param data - List of {@link DataElement} objects representing the data to be classified
	 * 
	 * <br><br>
	 * If passed labeled data, this <b>will overwrite</b> the existing label 
	 * if a new label is predicted.
	 * 
	 */
	public static void predict(svm_model model, int predict_probability, List<DataElement> data)
	{

		int svm_type = svm.svm_get_svm_type(model);
		double[] prob_estimates = null;

		for (DataElement d : data)
		{			
			Double[] thisData = d.getData();
			
			// Need to know how many entries are actually
			// being used (total - DO NOT PROCESS flagged entries)
			int numValidEntries = 0;
			for (int k = 0; k < thisData.length; k++)
			{
				if (thisData[k] != DataElement.DO_NOT_PROCESS)
					numValidEntries++;				
			}
			
			// populate node array
			int m = numValidEntries;
			svm_node[] x = new svm_node[m];			
			for (int j = 0, k = 0; j < m; j++, k++)
			{
				
				// Get next index:value pair from thisData that
				// isn't flagged as DO NOT PROCESS and add to x				
				while (thisData[k] == DataElement.DO_NOT_PROCESS)
					k++;
								
				x[j] = new svm_node();
				x[j].index = k;
				x[j].value = thisData[k];			
			}
			
			// Pass node array to the correct prediction method
			double v;
			if (predict_probability == 1 && (svm_type == svm_parameter.C_SVC || svm_type == svm_parameter.NU_SVC))
			{
				v = svm.svm_predict_probability(model,x,prob_estimates);
			}
			else
			{
				v = svm.svm_predict(model,x);
			}
			
			// Fill in label
			d.setClassLabel(v);
		}
	}
}
