package wrappertest;

import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.junit.Test;

import svmwrapper.DataElement;
import svmwrapper.Scale;

/**
 * This class tests Scale. It validates the output of the scale method
 * by comparing its calculated data to data generated by the 
 * svm_scale command line program when used on the same raw data.
 * 
 * @author jharper
 *
 */
public class ScaleTest
{

	@Test
	public void test()
	{

		// Get test data (scaled and unscaled)
		ArrayList<DataElement> computed = readFile("src/test/data/unscaled_sample.txt");
		ArrayList<DataElement> cliScaled = readFile("src/test/data/scaled_sample.txt");

		// Perform scale operation		
		Scale.scale(computed,-1,1);	
		
		// Compare computed scaled values to known values
		if (cliScaled.size() != computed.size())
		{
			fail();
		}
		for (int i = 0; i < cliScaled.size(); i++)
		{
			Double[] cli = cliScaled.get(i).getData();
			Double[] gen = computed.get(i).getData();
			
			for (int j = 0; j < cli.length; j++)
				if (Double.compare(cli[j], gen[j]) != 0)
					fail();					
		}
	}
	
	/**
	 * Read filename in, convert to DataElement ArrayList
	 * 
	 * @param filename - name of file to be read (in libsvm format)
	 * 
	 * @return ArrayList of DataElements, with each DataElement representing one line in the file
	 */
	private ArrayList<DataElement> readFile(String filename)
	{
		
		ArrayList<DataElement> elts = new ArrayList<DataElement>();
		try (BufferedReader r = new BufferedReader(new FileReader(new File(filename))))
		{

			// Read unscaled input data			
			for (String line = r.readLine(); line != null; line = r.readLine())
			{
				DataElement de = new DataElement();
				
				String[] components = line.split(" ");

				// Get the index:value pairs, add them to the data array
				ArrayList<Double> data = new ArrayList<>();
				String[] t = Arrays.copyOfRange(components, 1, components.length);
				int lastIndex = -1;
				for (int i = 0; i < t.length; i++)
				{
					String pair = t[i];
					int index = -1;
					Double d = 0.0;
					try
					{
						index = Integer.parseInt(pair.split(":")[0]);
						d = Double.parseDouble(pair.split(":")[1]);
					}
					catch (Exception e)
					{
						Logger.getAnonymousLogger().log(Level.INFO,pair.toString());
						fail();
					}
					if (index > data.size())
					{
						
						// Flag missing values in the input file
						while (lastIndex++ < index)
						{
							data.add(DataElement.DO_NOT_PROCESS);
						}
					}
					data.add(index,d);
				}
				Double[] d = new Double[data.size()];
				data.toArray(d);
				de.setData(d);
				
				elts.add(de);
			}		
		}
		catch (Exception ex)
		{
			fail();
		}
		return elts;
	}

}
